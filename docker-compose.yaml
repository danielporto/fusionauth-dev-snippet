#----------------------------------------------------------------------------------
#
# this file contains extra services and overrides used only in development
#
#----------------------------------------------------------------------------------
version: "3.8"

networks: 
  net_frontend:
    name: net_frontend
    driver: bridge
  net_backend: # this is traefik internal network, must match the traefik.yaml file
    name: net_backend
    driver: bridge

volumes:
  vol_auth_data:
  vol_auth_config:

services:
#==================================================================================
# reverse proxy
#==================================================================================
#https://old.reddit.com/r/Traefik/comments/gb3hws/self_signed_ssl_does_not_work_with_traefik_2/
#----------------------------------------------------------------------------------
# traefik local deployment configuration
#----------------------------------------------------------------------------------
  # traefik:
  #   image: traefik:v${TRAEFIK_VERSION}
  #   restart: unless-stopped
  #   networks:
  #     net_frontend:
  #       aliases:
  #         - traefik.${DOMAIN_NAME}
  #     net_backend:
  #       aliases:
  #         - traefik.${DOMAIN_NAME}
  #   ports:
  #     - 80:80
  #     - 443:443
  #     - 8080:8080
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml
  #     - ./traefik/dynamic.yaml:/etc/traefik/dynamic.yaml
  #     - ./certs/${DOMAIN_NAME}.crt:/certs/cert.crt
  #     - ./certs/${DOMAIN_NAME}.key:/certs/priv.key      
  #   labels:
  #     traefik.enable: true
  #     traefik.docker.network: net_backend  # required when container connects to more than one network
  #     traefik.http.routers.traefik.rule: Host(`traefik.$DOMAIN_NAME`)
  #     traefik.http.routers.traefik.tls: true
  #     traefik.http.routers.traefik.entrypoints: websecure
  #     traefik.http.services.traefik.loadbalancer.server.port: 8080
  #   healthcheck:
  #     test: 
  #       - CMD
  #       - traefik
  #       - healthcheck
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

    
#==================================================================================
# Authentication and authorization services
# https://devops.datenkollektiv.de/using-a-postgresql-with-docker-like-a-pro.html
#==================================================================================

  postgres:
    image: postgres:${POSTGRES_VERSION}
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      net_backend:
        aliases:
          - postgres.${DOMAIN_NAME}
    restart: unless-stopped
    volumes:
      - vol_auth_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # more info: 
  # https://fusionauth.io/docs/v1/tech/installation-guide/kickstart/
  # https://fusionauth.io/docs/v1/tech/installation-guide/docker/#kickstart
  # https://github.com/FusionAuth/fusionauth-example-kickstart
  fusionauth:
    image: danielporto/fusionauth-app:${FUSIONAUTH_VERSION}
    build:
        context: ./fusionauth
        dockerfile: Dockerfile
        args:
          FUSIONAUTH_VERSION: ${FUSIONAUTH_VERSION}
    environment:
      DATABASE_URL: jdbc:postgresql://postgres.${DOMAIN_NAME}:5432/fusionauth
      DATABASE_ROOT_USERNAME: ${POSTGRES_USER}
      DATABASE_ROOT_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      FUSIONAUTH_APP_MEMORY: ${FUSIONAUTH_APP_MEMORY}
      FUSIONAUTH_APP_HTTP_PORT: ${FUSIONAUTH_APP_HTTP_PORT}
      FUSIONAUTH_APP_HTTPS_PORT: ${FUSIONAUTH_APP_HTTPS_PORT}
      FUSIONAUTH_APP_RUNTIME_MODE: development
      FUSIONAUTH_APP_URL: http://fusionauth.${DOMAIN_NAME}:${FUSIONAUTH_APP_HTTP_PORT}
      FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/${FUSIONAUTH_APP_KICKSTART_FILE}
      SEARCH_TYPE: database
    # labels:
    #   traefik.enable: true
    #   traefik.docker.network: net_backend  # required when container connects to more than one network
    #   traefik.http.routers.fusionauth.rule: Host(`fusionauth.${DOMAIN_NAME}`)
    #   traefik.http.routers.fusionauth.entrypoints: websecure
    #   traefik.http.routers.fusionauth.tls: true
    #   traefik.http.routers.fusionauth.service: fusionauth
    #   traefik.http.services.fusionauth.loadbalancer.server.port: ${FUSIONAUTH_APP_HTTP_PORT}
    #   traefik.web.backend.healthcheck.path: /
    #   traefik.web.backend.healthcheck.interval: 10s
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${FUSIONAUTH_APP_HTTP_PORT}/api/status || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
     net_backend:
      aliases:
        - fusionauth.${DOMAIN_NAME}
    restart: unless-stopped
    ports:
      - 9011:9011
    volumes:
      - vol_auth_config:/usr/local/fusionauth/config
      - ./fusionauth/kickstart:/usr/local/fusionauth/kickstart
    # depends_on:
    #   traefik:
    #     condition: service_healthy
    #   postgres:
    #     condition: service_healthy

#==================================================================================
# Fake email for development
#==================================================================================
# https://github.com/mailhog/MailHog
  # mailhog:
  #   image: mailhog/mailhog:v1.0.1
  #   networks:
  #     net_backend:
  #       aliases:
  #         - mail.${DOMAIN_NAME}
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.mailhog.entrypoints: websecure
  #     traefik.http.routers.mailhog.rule: Host(`mailhog.${DOMAIN_NAME}`)
  #     traefik.http.routers.mailhog.tls: true
  #     traefik.http.routers.mailhog.service: mailhog
  #     traefik.http.services.mailhog.loadbalancer.server.port: 8025

  #     traefik.http.routers.smtp.entrypoints: email
  #     traefik.http.routers.smtp.rule: Host(`smtp.${DOMAIN_NAME}`)
  #     traefik.http.routers.smtp.service: smtp
  #     traefik.http.services.smtp.loadbalancer.server.port: 1025
  #   depends_on:
  #     traefik:
  #       condition: service_healthy

      traefik.http.routers.smtp.entrypoints: email
      traefik.http.routers.smtp.rule: Host(`smtp.${DOMAIN_NAME}`)
      traefik.http.routers.smtp.service: smtp
      traefik.http.services.smtp.loadbalancer.server.port: 1025
    depends_on:
      traefik:
        condition: service_healthy

  jsserver:
    image: jsserver
    build: 
      context: ./js/vue/server
      dockerfile: Dockerfile
    networks:
      net_backend:
        aliases:
          - "jsserver.${DOMAIN_NAME}"
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./js/vue/server:/usr/src/app  
      # - ./js/vue/node_modules:/usr/src/node_modules
    environment:
      # - "NODE_MODULES_DIR=/usr/src/node_modules"
      - "SERVER_PORT=${SERVER_PORT}"
      - "FUSIONAUTH_PORT=${FUSIONAUTH_PORT}"
      - "CLIENT_ID=${CLIENT_ID}"
      - "CLIENT_SECRET=${CLIENT_SECRET}"
      - "REDIRECT_URI=${REDIRECT_URI}"
      - "APLICATION_ID=${APLICATION_ID}"
      - "API_KEY=${API_KEY}"
      - "DOMAIN_NAME=${DOMAIN_NAME}"
    command: bash -c "npm install --quiet && npm run dev"
    # labels:
    #   traefik.enable: true
    #   traefik.http.routers.jsserver.rule: Host(`jsserver.${DOMAIN_NAME}`) 
    #   traefik.http.routers.jsserver.entrypoints: websecure
    #   traefik.http.routers.jsserver.tls: true
    #   traefik.http.services.jsserver.loadbalancer.server.port: ${SERVER_PORT}
  
  jsclient:
    image: jsclient
    build: 
      context: ./js/vue/client
      dockerfile: Dockerfile
    networks:
      net_backend:
        aliases:
          - "jsclient.${DOMAIN_NAME}"
    ports:
      - 8081:8081
    volumes:
      - ./js/vue/client:/usr/src/app  
      # - ./js/vue/node_modules:/usr/src/node_modules
    command: bash -c "npm install --quiet && npm run serve"
    environment:
      - "DOMAIN_NAME=${DOMAIN_NAME}"
    #   - "NODE_MODULES_DIR=/usr/src/node_modules"

    # labels:
    #   traefik.enable: true
    #   traefik.http.routers.jsclient.rule: Host(`jsclient.${DOMAIN_NAME}`) 
    #   traefik.http.routers.jsclient.entrypoints: websecure
    #   traefik.http.routers.jsclient.tls: true
    #   traefik.http.services.jsclient.loadbalancer.server.port: 8081
    #   traefik.http.middlewares.jsclient.redirectregex.regex: '^http://jsclient.${DOMAIN_NAME}/login\?(.*)userState=AuthenticatedNotRegistered(.*)'
    #   traefik.http.middlewares.jsclient.redirectregex.replacement: "http://jsclient.${DOMAIN_NAME}"
    #   traefik.http.routers.jsclient.middlewares: jsclient@docker

    depends_on:
      - jsserver

  
      